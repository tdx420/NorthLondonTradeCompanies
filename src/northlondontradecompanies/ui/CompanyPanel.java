/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package northlondontradecompanies.ui;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.lang.System.exit;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import northlondontradecompanies.core.Administrator;
import northlondontradecompanies.core.Company;

/**
 * This Class holds the <code> CompanyList</code> and
 * <code> CompanyEditor</code> , so they are set as right and left components
 * inside a JSplitPane. The class implements <code>ListSelectionListener</code>
 * interface, and its valueChanged() method to register an action appropriate
 * for whenever a list is selected. The <code> JList</code> class (of which our
 * <code> CompanyList</code> is a subclass of) supports the fact that client
 * objects may wish to listen to the selections in the list. The purpose of this
 * class is to be passed as an argument to the addListSelectionlistner() method
 * of <code> JList</code>.
 *
 * @author tdx_429
 */
public class CompanyPanel extends javax.swing.JPanel implements ListSelectionListener {

    /**
     * instance variable to reference Administrator object
     */
    private Administrator admin;
    /**
     * Creates new form CompanyPanel
     */
    private JMenuBar menubar;
    private JMenu file;
    private JMenuItem exit;
    private JFrame parent;

    /**
     * Constructor that obtains the <code>Administrator</code> object to call
     * its addCompanyListener() method ,to which the companyList instance is
     * passed on as its argument to be ready to listen to events. The
     * constructor also invoke the registration to listen to list events to know
     * if a Company has been selected from a list.
     *
     * @param frame
     */
    public CompanyPanel(JFrame frame) {
        initComponents();
        //ensure you listen to the list events so invoke the registration on the constructor 

        admin = Administrator.getInstance();

        /**
         *
         */
        admin.addCompanyListener(companyList);
        companyList.addListSelectionListener(this);

        parent = frame;
        menubar = new JMenuBar();
        parent.setJMenuBar(menubar);
        file = new JMenu("File");
        menubar.add(file);

        exit = new JMenuItem("Exit");
        file.add(exit);

        event e = new event();
        exit.addActionListener(e);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        companyList = new northlondontradecompanies.ui.CompanyList();
        companyEditor = new northlondontradecompanies.ui.CompanyEditor();

        setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(454, 454, 454)
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeButton)
                .addContainerGap(323, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(removeButton))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jScrollPane1.setViewportView(companyList);

        jSplitPane1.setLeftComponent(jScrollPane1);
        jSplitPane1.setRightComponent(companyEditor);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method simply enables the user to switch from "change" mode back
     * into the "add" mode. It invokes the clearZooKeeper() on the companyEditor
     * instance and deSelectListItems() on the companyList to ensure that a list
     * is de-selected.
     *
     * @param evt
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        companyList.deselectListItems();
        companyEditor.clearCompany();
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * The method ask the user to confirm if they really want to remove the
     * company , and upon confirmation, removeCompany method of Administrator is
     * invoked to perform the removal of the company. The editor is placed back
     * into "add" mode after the company has been removed, so we invoke the
     * clearCompany() method.
     *
     * @param evt
     */
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:

        Company company = (Company) companyList.getSelectedValue();
        int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove " + company.getName() + "?", "Confirm Remove", JOptionPane.YES_NO_OPTION);

        if (response == JOptionPane.YES_OPTION) {
            admin.removeCompany(company);
            companyEditor.clearCompany();
        }
    }//GEN-LAST:event_removeButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private northlondontradecompanies.ui.CompanyEditor companyEditor;
    private northlondontradecompanies.ui.CompanyList companyList;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Method that is called every time upon user selection of a
     * <code>Company</code> from the list. The getSelectedValue() method is used
     * to retrieve the selected Object. The method then can perform check to
     * ensure that the object retained is not null, and provided that is not
     * null, a casting is performed to cast from <code>Object</code> to
     * <code>Company</code>. The <code>Company</code> Object returned can then
     * be passed to setCompany() method of <code>CompanyEditor</code>. The
     * method also ensures to enable the remove button if an company is selected
     * and disable if nothing is selected from the list.
     *
     * @param e
     */
    @Override
    public void valueChanged(ListSelectionEvent e) {
        //a company has been selected from the list
        //Test this later to see what it returns :*
        Object selected = companyList.getSelectedValue();

        if (selected != null) {
            Company company = (Company) selected;
            companyEditor.setCompany(company);
            removeButton.setEnabled(true);
        } else {
            removeButton.setEnabled(false);
        }

    }

    public class event implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            Administrator admin = Administrator.getInstance();
            //  admin.saveData();
            System.exit(0);
        }
    }
}
